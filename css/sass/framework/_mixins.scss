/* ==========================================================================
 * 2. Mixins
 * ========================================================================== */

/* --------------------------------------------------------------------------
 * Clearfix
 * -------------------------------------------------------------------------- */

@mixin clearfix {
    *zoom: 1;

    &:before,
    &:after {
        content: " ";
        display: table;
    }

    &:after {
        clear: both;
    }
}

@mixin center-block {
    display: block;
    margin-left: auto;
    margin-right: auto;
}


/* --------------------------------------------------------------------------
 * Form Placeholder
 * -------------------------------------------------------------------------- */

@mixin placeholder($color: $placeholderText) {

    &:-moz-placeholder {
        color: $color;
    }

    &:-ms-input-placeholder {
        color: $color;
    }

    &::-webkit-input-placeholder {
        color: $color;
    }

}


/* --------------------------------------------------------------------------
 * CSS Transitions, Border Radius, Box Shadow & Box Sizing
 * -------------------------------------------------------------------------- */

@mixin transition($transition...) {
    -webkit-transition: $transition;
            transition: $transition;
}

@mixin border-radius($radius: $borderRadius) {
    -webkit-border-radius: $radius;
       -moz-border-radius: $radius;
            border-radius: $radius;
}

@mixin border-right-radius($radius) {
    -webkit-border-bottom-right-radius: 0;
       -moz-border-bottom-right-radius: 0;
            border-bottom-right-radius: 0;
    -webkit-border-top-right-radius: 0;
       -moz-border-top-right-radius: 0;
            border-top-right-radius: 0;
}

@mixin border-left-radius($radius) {
    -webkit-border-bottom-left-radius: 0;
       -moz-border-bottom-left-radius: 0;
            border-bottom-left-radius: 0;
    -webkit-border-top-left-radius: 0;
       -moz-border-top-left-radius: 0;
            border-top-left-radius: 0;
}

@mixin box-shadow($shadow...){
    -webkit-box-shadow: $shadow;
       -moz-box-shadow: $shadow;
            box-shadow: $shadow;
}

@mixin box-sizing($boxmodel) {
    -webkit-box-sizing: $boxmodel;
       -moz-box-sizing: $boxmodel;
            box-sizing: $boxmodel;
}

/* --------------------------------------------------------------------------
 * Opacity
 * -------------------------------------------------------------------------- */

@mixin opacity($opacity) {
    opacity: $opacity / 100;
    filter: alpha(opacity=$opacity);
}

/* --------------------------------------------------------------------------
 * Hide Text
 * -------------------------------------------------------------------------- */

@mixin hide-text(){
    background-color: transparent;
    border: 0;
    overflow: hidden;
    /* IE 6/7 fallback */
    *text-index: -9999px;

    &:before {
        content: "";
        display: block;
        width: 0;
        height: 150%;
    }
}


/* --------------------------------------------------------------------------
 * Responsive Images
 * -------------------------------------------------------------------------- */

@mixin image-responsive($display: block) {
    display: $display;
    max-width: 100%;
    height: auto;
}

/* --------------------------------------------------------------------------
 * Grid Mixins
 * -------------------------------------------------------------------------- */

@mixin container-fixed(){
    margin-left: auto;
    margin-right: auto;
    @include clearfix();
}

@mixin grid-core($gridColumnWidth, $gridGutterWidth){

    .row {
        margin-left: $gridGutterWidth * -1;
        @include clearfix();
    }

    [class*="span"] {
        float: left;
        min-height: 1px;
        margin-left: $gridGutterWidth;
    }

    .container {
        @include grid-core-span($gridColumns, $gridColumnWidth, $gridGutterWidth);
    }

    @include grid-core-span-x($gridColumns, $gridColumnWidth, $gridGutterWidth);
    @include grid-core-offset-x($gridColumns, $gridColumnWidth, $gridGutterWidth);

}

@mixin grid-core-span-x($gridColumns, $gridColumnWidth, $gridGutterWidth){

    @for $i from 1 through $gridColumns {
        .span#{$i} { @include grid-core-span($i, $gridColumnWidth, $gridGutterWidth); }
    }

}

@mixin grid-core-offset-x($gridColumns, $gridColumnWidth, $gridGutterWidth){

    @for $i from 1 through $gridColumns {
        .offset#{$i} { @include grid-core-offset($i, $gridColumnWidth, $gridGutterWidth); }
    }

}

@mixin grid-core-span($columns, $gridColumnWidth, $gridGutterWidth){
    width: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns - 1));
}

@mixin grid-core-offset($columns, $gridColumnWidth, $gridGutterWidth){
    margin-left: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns + 1));
}

@mixin grid-fluid($fluidGridColumnWidth, $fluidGridGutterWidth) {
    .row-fluid {
        width: 100%;
        @include clearfix();

        [class*="span"] {
            // @include input-block-level();
            float: left;
            margin-left: $fluidGridGutterWidth;
            *margin-left: $fluidGridGutterWidth - (.5 / $gridRowWidth * 100px * 1%);
        }

        [class*="span"]:first-child {
        margin-left: 0;
        }

        // Space grid-sized controls properly if multiple per line
        .controls-row [class*="span"] + [class*="span"] {
            margin-left: $fluidGridGutterWidth;
        }

        // generate .spanX and .offsetX
        @include grid-fluid-span-x($gridColumns, $fluidGridColumnWidth, $fluidGridGutterWidth);
        @include grid-fluid-offset-x($gridColumns, $fluidGridColumnWidth, $fluidGridGutterWidth);

    }

}

@mixin grid-fluid-span-x($gridColumns, $fluidGridColumnWidth, $fluidGridGutterWidth) {

    @for $i from 1 through $gridColumns {
        .span#{$i} { @include grid-fluid-span($i, $fluidGridColumnWidth, $fluidGridGutterWidth); }
    }

}

@mixin grid-fluid-offset-x($gridColumns, $fluidGridColumnWidth, $fluidGridGutterWidth) {

    @for $i from 1 through $gridColumns {
        .offset#{$i} { @include grid-fluid-offset($i, $fluidGridColumnWidth, $fluidGridGutterWidth); }
        .offset#{$i}:first-child { @include grid-fluid-offset-first-child($i, $fluidGridColumnWidth, $fluidGridGutterWidth); }
    }

}

@mixin grid-fluid-span($columns, $fluidGridColumnWidth, $fluidGridGutterWidth){
    width: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1));
    *width: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1)) - (.5 / $gridRowWidth * 100px * 1%);
}

@mixin grid-fluid-offset($columns, $fluidGridColumnWidth, $fluidGridGutterWidth){
    margin-left: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1)) + ($fluidGridGutterWidth * 2);
    *margin-left: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1)) - (.5 / $gridRowWidth * 100px * 1%) + ($fluidGridGutterWidth * 2) - (.5 / $gridRowWidth * 100px * 1%);
}

@mixin grid-fluid-offset-first-child($columns, $fluidGridColumnWidth, $fluidGridGutterWidth) {
    margin-left: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1)) + ($fluidGridGutterWidth);
    *margin-left: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1)) - (.5 / $gridRowWidth * 100px * 1%) + $fluidGridGutterWidth - (.5 / $gridRowWidth * 100px * 1%);
}